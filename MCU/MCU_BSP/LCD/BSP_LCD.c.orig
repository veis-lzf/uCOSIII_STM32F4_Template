#include "BSP_DRIVE.h"
#include "font.h"

LCD_Describe_TD  LCD_Describe_Struct;                   //该结构体用于记录LCD的所有信息

//LCD的画笔颜色和背景色	   
u16 POINT_COLOR=0x0000;	//画笔颜色
u16 BACK_COLOR=0xFFFF;  //背景色 

void LCD_FSMC_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct;
    FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;
    FSMC_NORSRAMTimingInitTypeDef FSMC_NORSRAMTimingInitStruct;
    
    
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG,ENABLE);//开启GPIO时钟
    RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC,ENABLE); //开启FSMC时钟         
    
    GPIO_InitStruct.GPIO_Mode   =   GPIO_Mode_OUT;      //普通输出
    GPIO_InitStruct.GPIO_OType  =   GPIO_OType_PP;      //推挽输出
    GPIO_InitStruct.GPIO_PuPd   =   GPIO_PuPd_UP;       //上拉
    GPIO_InitStruct.GPIO_Speed  =   GPIO_Speed_100MHz;  //100MHz
    
    GPIO_InitStruct.GPIO_Pin    =   GPIO_Pin_15;//PB15 推挽输出,控制背光
    GPIO_Init(GPIOB,&GPIO_InitStruct);                  //初始化GPIOD
    
    GPIO_InitStruct.GPIO_Mode   =   GPIO_Mode_AF;       //复用输出
    
    GPIO_InitStruct.GPIO_Pin    =   GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_8 | 
                                    GPIO_Pin_9 | GPIO_Pin_10| GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_Init(GPIOD,&GPIO_InitStruct);                  //初始化GPIOD
    
    GPIO_InitStruct.GPIO_Pin    =   GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10| GPIO_Pin_11 | 
                                    GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_Init(GPIOE,&GPIO_InitStruct);                  //初始化GPIOE
    
    GPIO_InitStruct.GPIO_Pin    =   GPIO_Pin_12;        //PF12,FSMC_A6
    GPIO_Init(GPIOF,&GPIO_InitStruct);                  //初始化GPIOF
    
    GPIO_InitStruct.GPIO_Pin    =   GPIO_Pin_12;        //PG12,FSMC_NE4
    GPIO_Init(GPIOG,&GPIO_InitStruct);                  //初始化GPIOG
    
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource0,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource1,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource4,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource5,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource8,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource9,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource10,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource14,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOD,GPIO_PinSource15,GPIO_AF_FSMC);
    
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource7,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource8,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource9,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource10,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource11,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource12,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource13,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource14,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOE,GPIO_PinSource15,GPIO_AF_FSMC);

    GPIO_PinAFConfig(GPIOF,GPIO_PinSource12,GPIO_AF_FSMC);
    GPIO_PinAFConfig(GPIOG,GPIO_PinSource12,GPIO_AF_FSMC);
    
    FSMC_NORSRAMInitStructure.FSMC_Bank             =   FSMC_Bank1_NORSRAM4;                //选用块1区4
    FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode  =   FSMC_BurstAccessMode_Disable;
    FSMC_NORSRAMInitStructure.FSMC_DataAddressMux   =   FSMC_DataAddressMux_Disable;        // 不复用数据地址
    FSMC_NORSRAMInitStructure.FSMC_ExtendedMode     =   FSMC_ExtendedMode_Enable;           //读写不同时序
    FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth  =   FSMC_MemoryDataWidth_16b;           //存储器数据宽度为16bit
    FSMC_NORSRAMInitStructure.FSMC_MemoryType       =   FSMC_MemoryType_SRAM;               //把LCD当SRAM
    FSMC_NORSRAMInitStructure.FSMC_WriteOperation   =   FSMC_WriteOperation_Enable;         //写使能
    FSMC_NORSRAMInitStructure.FSMC_WaitSignal       =   FSMC_WaitSignal_Disable;
    FSMC_NORSRAMInitStructure.FSMC_WriteBurst       =   FSMC_WriteBurst_Disable;    
    FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait =   FSMC_AsynchronousWait_Disable; 
    FSMC_NORSRAMInitStructure.FSMC_WrapMode         =   FSMC_WrapMode_Disable;   
    FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive =   FSMC_WaitSignalActive_BeforeWaitState;
    
        FSMC_NORSRAMTimingInitStruct.FSMC_AccessMode    =   FSMC_AccessMode_A;              //读时序地址建立时间（ADDSET）为16个HCLK 1/168M=6ns*16=96ns    
        FSMC_NORSRAMTimingInitStruct.FSMC_AddressHoldTime   =   0;                          //读时序地址保持时间（ADDHLD）模式A未用到	                                  
        FSMC_NORSRAMTimingInitStruct.FSMC_AddressSetupTime  =   16;
        FSMC_NORSRAMTimingInitStruct.FSMC_BusTurnAroundDuration = 0;
        FSMC_NORSRAMTimingInitStruct.FSMC_CLKDivision   =   0;
        FSMC_NORSRAMTimingInitStruct.FSMC_DataLatency   =   0;
        FSMC_NORSRAMTimingInitStruct.FSMC_DataSetupTime =   60;                             //读时序数据保存时间为60个HCLK	=6*60=360ns    
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &FSMC_NORSRAMTimingInitStruct;   //读时序赋值
    
        FSMC_NORSRAMTimingInitStruct.FSMC_AddressSetupTime  =   9;                          //写时序地址建立时间（ADDSET）为9个HCLK =54ns 
        FSMC_NORSRAMTimingInitStruct.FSMC_DataSetupTime     =   8;                          //写时序数据保存时间为6ns*9个HCLK=54ns                              
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct= &FSMC_NORSRAMTimingInitStruct;        //写时序赋值    
    
    FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);                                           //初始化FSMC
    
    FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4,ENABLE);
}

//写寄存器
//Reg_Value:寄存器值
void LCD_WR_REG(vu16 Reg_Value)
{
    Reg_Value = Reg_Value;          //使用-O2优化的时候,必须插入的延时
    LCD->LCD_REG = Reg_Value;       //写入要写的寄存器序号	
}

//写LCD数据
//Data:要写入的值
void LCD_WR_DATA(vu16 Data)
{	  
	Data = Data;			        //使用-O2优化的时候,必须插入的延时
	LCD->LCD_RAM = Data;		 
}
//读LCD数据
//返回值:读到的值
u16 LCD_RD_DATA(void)
{
	vu16 Data;			//防止被优化
	Data = LCD->LCD_RAM;	
	return Data;	 
}					   
//写寄存器
//LCD_Reg:寄存器地址
//LCD_Reg_Value:要写入的数据
void LCD_Write_Reg(u16 LCD_Reg,u16 LCD_Reg_Value)
{	
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号	 
	LCD->LCD_RAM = LCD_Reg_Value;//写入数据	    		 
}	   
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
u16 LCD_ReadReg(u16 LCD_Reg)
{										   
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
	delay_us(5);		  
	return LCD_RD_DATA();		//返回读到的值
}   
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 	LCD->LCD_REG = LCD_Describe_Struct.WR_Gram_Cmd;	  
}	 
//LCD写GRAM
//RGB_Code:颜色值
void LCD_WriteRAM(u16 RGB_Code)
{							    
	LCD->LCD_RAM = RGB_Code;//写十六位GRAM
}

//从ILI93xx读出的数据为GBR格式，而我们写入的时候为RGB格式。
//通过该函数转换
//c:GBR格式的颜色值
//返回值：RGB格式的颜色值
u16 LCD_BGR2RGB(u16 GBR)
{
	u16  RGB,RGB_R,RGB_G,RGB_B;   
	RGB_R = (GBR>>0) & 0x1f;
	RGB_B = (GBR>>5)&0x3f;
	RGB_G = (GBR>>11)&0x1f;	 
	RGB   = (RGB_R<<11)+(RGB_G<<5)+(RGB_B<<0);		 
	return(RGB);
} 

//LCD开启显示
void LCD_DisplayOn(void)
{					   
	if(LCD_Describe_Struct.ID == 0X9341 || LCD_Describe_Struct.ID == 0X6804 || LCD_Describe_Struct.ID==0X5310 || LCD_Describe_Struct.ID == 0X1963)LCD_WR_REG(0X29);	//开启显示
	else if(LCD_Describe_Struct.ID == 0X5510)LCD_WR_REG(0X2900);	//开启显示
	else LCD_Write_Reg(0X07,0x0173); 				 	//开启显示
}	 
//LCD关闭显示
void LCD_DisplayOff(void)
{	   
	if(LCD_Describe_Struct.ID == 0X9341 || LCD_Describe_Struct.ID == 0X6804 || LCD_Describe_Struct.ID == 0X5310 || LCD_Describe_Struct.ID == 0X1963)LCD_WR_REG(0X28);	//关闭显示
	else if(LCD_Describe_Struct.ID == 0X5510)LCD_WR_REG(0X2800);	//关闭显示
	else LCD_Write_Reg(0X07,0x0);//关闭显示 
}   
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
    if(LCD_Describe_Struct.ID == 0X9341 || LCD_Describe_Struct.ID == 0X5310)
	{		    
		LCD_WR_REG(LCD_Describe_Struct.Set_X_Cmd); 
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF); 			 
		LCD_WR_REG(LCD_Describe_Struct.Set_Y_Cmd); 
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF); 		
	}
}

//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(u16 x,u16 y)
{
	LCD_SetCursor(x,y);		//设置光标位置 
	LCD_WriteRAM_Prepare();	//开始写入GRAM
	LCD->LCD_RAM=POINT_COLOR; 
}

//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{	
	LCD_WR_REG(0xBE);	//配置PWM输出
	LCD_WR_DATA(0x05);	//1设置PWM频率
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
	LCD_WR_DATA(0x01);	//3设置C
	LCD_WR_DATA(0xFF);	//4设置D
	LCD_WR_DATA(0x00);	//5设置E
	LCD_WR_DATA(0x00);	//6设置F
}

//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x,u16 y,u16 color)
{
    if(LCD_Describe_Struct.ID == 0X9341 || LCD_Describe_Struct.ID == 0X5310)
	{
		LCD_WR_REG(LCD_Describe_Struct.Set_X_Cmd); 
		LCD_WR_DATA(x>>8);
        LCD_WR_DATA(x&0XFF);  			 
		LCD_WR_REG(LCD_Describe_Struct.Set_Y_Cmd); 
		LCD_WR_DATA(y>>8);
        LCD_WR_DATA(y&0XFF); 		 	 
	}
    LCD->LCD_REG = LCD_Describe_Struct.WR_Gram_Cmd; 
	LCD->LCD_RAM = color; 
}

//设置LCD的自动扫描方向   	   
void LCD_Scan_Dir(u8 dir)
{
     LCD_Write_Reg(0x36,dir);
}

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 Dir)
{
    if(Dir == 0)        //竖屏
    {
        LCD_Describe_Struct.Dir     =   0;
        LCD_Describe_Struct.Height  =   320;
        LCD_Describe_Struct.Width   =   240;
        if(LCD_Describe_Struct.ID == 0x9341 || LCD_Describe_Struct.ID == 0x6804 || LCD_Describe_Struct.ID == 0x5310)
        {
            LCD_Describe_Struct.WR_Gram_Cmd = 0x2c;
            LCD_Describe_Struct.Set_X_Cmd   = 0x2a;
            LCD_Describe_Struct.Set_Y_Cmd   = 0x2b;
        }
    }
    else            //横屏
    {
        LCD_Describe_Struct.Dir     =   1;
        LCD_Describe_Struct.Height  =   320;
        LCD_Describe_Struct.Width   =   240;
        if(LCD_Describe_Struct.ID == 0x9341 || LCD_Describe_Struct.ID == 0x5310)
        {
            LCD_Describe_Struct.WR_Gram_Cmd = 0x2c;
            LCD_Describe_Struct.Set_X_Cmd   = 0x2b;
            LCD_Describe_Struct.Set_Y_Cmd   = 0x2a;
        }
    }
    LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
}

//清屏函数
//color:要清屏的填充色
void LCD_Clear(u16 color)
{
	u32 index=0;      
	u32 totalpoint = LCD_Describe_Struct.Width;
	totalpoint *= LCD_Describe_Struct.Height; 			//得到总点数
	if((LCD_Describe_Struct.ID == 0X6804) && (LCD_Describe_Struct.Dir == 1))//6804横屏的时候特殊处理  
	{						    
 		LCD_Describe_Struct.Dir =0;	 
 		LCD_Describe_Struct.Set_X_Cmd = 0X2A;
		LCD_Describe_Struct.Set_Y_Cmd = 0X2B;  	 			
		LCD_SetCursor(0x00,0x0000);		//设置光标位置  
 		LCD_Describe_Struct.Dir = 1;	 
  		LCD_Describe_Struct.Set_X_Cmd = 0X2B;
		LCD_Describe_Struct.Set_Y_Cmd = 0X2A;   	 
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置 
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	 	  
	for(index=0;index<totalpoint;index++)
	{
		LCD->LCD_RAM=color;	
	}
}

void LCD_Init(void)
{
    LCD_FSMC_Init();
    delay_ms(50); // delay 50 ms 
 	LCD_Write_Reg(0x0000,0x0001);
	delay_ms(50); // delay 50 ms 
    LCD_Describe_Struct.ID = 0;
  	LCD_Describe_Struct.ID = LCD_ReadReg(0x0000);
    if(LCD_Describe_Struct.ID < 0xff || LCD_Describe_Struct.ID == 0xffff || LCD_Describe_Struct.ID == 0x9300)
    {
        LCD_WR_REG(0XD3);				   
		LCD_Describe_Struct.ID=LCD_RD_DATA();	//dummy read 	
 		LCD_Describe_Struct.ID=LCD_RD_DATA();	//读到0X00
  		LCD_Describe_Struct.ID=LCD_RD_DATA();   	//读取93								   
 		LCD_Describe_Struct.ID<<=8;
		LCD_Describe_Struct.ID|=LCD_RD_DATA();  	//读取41
    }
    D_DEBUG_printf(" LCD ID:%x\r\n",LCD_Describe_Struct.ID); //打印LCD ID   
	if(LCD_Describe_Struct.ID==0X9341)	//9341初始化
	{	 
		LCD_WR_REG(0xCF);  
		LCD_WR_DATA(0x00); 
		LCD_WR_DATA(0xC1); 
		LCD_WR_DATA(0X30); 
		LCD_WR_REG(0xED);  
		LCD_WR_DATA(0x64); 
		LCD_WR_DATA(0x03); 
		LCD_WR_DATA(0X12); 
		LCD_WR_DATA(0X81); 
		LCD_WR_REG(0xE8);  
		LCD_WR_DATA(0x85); 
		LCD_WR_DATA(0x10); 
		LCD_WR_DATA(0x7A); 
		LCD_WR_REG(0xCB);  
		LCD_WR_DATA(0x39); 
		LCD_WR_DATA(0x2C); 
		LCD_WR_DATA(0x00); 
		LCD_WR_DATA(0x34); 
		LCD_WR_DATA(0x02); 
		LCD_WR_REG(0xF7);  
		LCD_WR_DATA(0x20); 
		LCD_WR_REG(0xEA);  
		LCD_WR_DATA(0x00); 
		LCD_WR_DATA(0x00); 
		LCD_WR_REG(0xC0);    //Power control 
		LCD_WR_DATA(0x1B);   //VRH[5:0] 
		LCD_WR_REG(0xC1);    //Power control 
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0] 
		LCD_WR_REG(0xC5);    //VCM control 
		LCD_WR_DATA(0x30); 	 //3F
		LCD_WR_DATA(0x30); 	 //3C
		LCD_WR_REG(0xC7);    //VCM control2 
		LCD_WR_DATA(0XB7); 
		LCD_WR_REG(0x36);    // Memory Access Control 
		LCD_WR_DATA(0x48); 
		LCD_WR_REG(0x3A);   
		LCD_WR_DATA(0x55); 
		LCD_WR_REG(0xB1);   
		LCD_WR_DATA(0x00);   
		LCD_WR_DATA(0x1A); 
		LCD_WR_REG(0xB6);    // Display Function Control 
		LCD_WR_DATA(0x0A); 
		LCD_WR_DATA(0xA2); 
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
		LCD_WR_DATA(0x00); 
		LCD_WR_REG(0x26);    //Gamma curve selected 
		LCD_WR_DATA(0x01); 
		LCD_WR_REG(0xE0);    //Set Gamma 
		LCD_WR_DATA(0x0F); 
		LCD_WR_DATA(0x2A); 
		LCD_WR_DATA(0x28); 
		LCD_WR_DATA(0x08); 
		LCD_WR_DATA(0x0E); 
		LCD_WR_DATA(0x08); 
		LCD_WR_DATA(0x54); 
		LCD_WR_DATA(0XA9); 
		LCD_WR_DATA(0x43); 
		LCD_WR_DATA(0x0A); 
		LCD_WR_DATA(0x0F); 
		LCD_WR_DATA(0x00); 
		LCD_WR_DATA(0x00); 
		LCD_WR_DATA(0x00); 
		LCD_WR_DATA(0x00); 		 
		LCD_WR_REG(0XE1);    //Set Gamma 
		LCD_WR_DATA(0x00); 
		LCD_WR_DATA(0x15); 
		LCD_WR_DATA(0x17); 
		LCD_WR_DATA(0x07); 
		LCD_WR_DATA(0x11); 
		LCD_WR_DATA(0x06); 
		LCD_WR_DATA(0x2B); 
		LCD_WR_DATA(0x56); 
		LCD_WR_DATA(0x3C); 
		LCD_WR_DATA(0x05); 
		LCD_WR_DATA(0x10); 
		LCD_WR_DATA(0x0F); 
		LCD_WR_DATA(0x3F); 
		LCD_WR_DATA(0x3F); 
		LCD_WR_DATA(0x0F); 
		LCD_WR_REG(0x2B); 
		LCD_WR_DATA(0x00);
		LCD_WR_DATA(0x00);
		LCD_WR_DATA(0x01);
		LCD_WR_DATA(0x3f);
		LCD_WR_REG(0x2A); 
		LCD_WR_DATA(0x00);
		LCD_WR_DATA(0x00);
		LCD_WR_DATA(0x00);
		LCD_WR_DATA(0xef);	 
		LCD_WR_REG(0x11); //Exit Sleep
		delay_ms(120);
		LCD_WR_REG(0x29); //display on	
	}
    LCD_Display_Dir(0);		//默认为竖屏
	LCD_LED=1;				//点亮背光
	LCD_Clear(WHITE);
}

//在指定位置显示一个字符
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
{  							  
    u8 temp,t1,t;
	u16 y0=y;
	u8 csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数	
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
	for(t=0;t<csize;t++)
	{   
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
		{			    
			if(temp & 0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
			else if(mode == 0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
			temp <<= 1;
			y++;
			if(y >= LCD_Describe_Struct.Height)return;		//超区域了
			if((y - y0) == size)
			{
				y=y0;
				x++;
				if(x>=LCD_Describe_Struct.Width)return;	//超区域了
				break;
			}
		}  	 
	}  	    	   	 	  
}   

//显示字符串
//x,y:起点坐标
//width,height:区域大小  
//size:字体大小
//*p:字符串起始地址		  
void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
{         
	u8 x0=x;
	width+=x;
	height+=y;
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
    {       
        if(x>=width){x=x0;y+=size;}
        if(y>=height)break;//退出
        LCD_ShowChar(x,y,*p,size,0);
        x+=size/2;
        p++;
    }  
}
